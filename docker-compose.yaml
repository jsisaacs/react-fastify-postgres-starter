services:
  db:
    image: postgres:17
    container_name: db
    restart: always
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    ports:
      - '${POSTGRES_PORT}:${POSTGRES_PORT}'
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $${POSTGRES_USER} -d $${POSTGRES_DB}']
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql

  api:
    build:
      context: .
      dockerfile: api/Dockerfile
    container_name: api
    restart: always
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      DATABASE_URL: 'postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:${POSTGRES_PORT}/${POSTGRES_DB}'
      PORT: ${API_PORT}
    ports:
      - '${API_PORT}:${API_PORT}'
    volumes:
      - ./api:/app/api
      - api_node_modules:/app/api/node_modules

  frontend:
    build:
      context: .
      dockerfile: frontend/Dockerfile
    container_name: frontend
    restart: always
    depends_on:
      api:
        condition: service_started
    env_file:
      - .env
    environment:
      VITE_API_URL: http://localhost:${API_PORT}
    ports:
      - '${FRONTEND_PORT}:${FRONTEND_PORT}'
    volumes:
      - ./frontend:/app/frontend
      - frontend_node_modules:/app/frontend/node_modules

volumes:
  postgres_data:
    driver: local
  api_node_modules:
  frontend_node_modules:
